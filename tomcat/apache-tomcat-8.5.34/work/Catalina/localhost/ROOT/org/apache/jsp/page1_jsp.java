/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.34
 * Generated at: 2018-10-31 08:15:12 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.Date;

public final class page1_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.Date");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\t<!DOCTYPE html>\n");
      out.write("\t\n");
      out.write("\t\n");
      out.write("\t<html lang=\"zxx\" class=\"no-js\">\n");
      out.write("\t<head>\n");
      out.write("\t\t<!-- Mobile Specific Meta -->\n");
      out.write("\t\t<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n");
      out.write("\t\t<!-- Favicon-->\n");
      out.write("\t\t<link rel=\"shortcut icon\" href=\"img/fav.png\">\n");
      out.write("\t\t<!-- Author Meta -->\n");
      out.write("\t\t<meta name=\"author\" content=\"colorlib\">\n");
      out.write("\t\t<!-- Meta Description -->\n");
      out.write("\t\t<meta name=\"description\" content=\"\">\n");
      out.write("\t\t<!-- Meta Keyword -->\n");
      out.write("\t\t<meta name=\"keywords\" content=\"\">\n");
      out.write("\t\t<!-- meta character set -->\n");
      out.write("\t\t<meta charset=\"UTF-8\">\n");
      out.write("\t\t<!-- Site Title -->\n");
      out.write("\t\t<title>App Tester</title>\n");
      out.write("\n");
      out.write("\t\t<link href=\"https://fonts.googleapis.com/css?family=Poppins:100,200,400,300,500,600,700\" rel=\"stylesheet\">\n");
      out.write("\t\t\t<!--\n");
      out.write("\t\t\tCSS\n");
      out.write("\t\t\t============================================= -->\n");
      out.write("\t\t\t<link rel=\"stylesheet\" href=\"css/linearicons.css\">\n");
      out.write("\t\t\t<link rel=\"stylesheet\" href=\"css/font-awesome.min.css\">\n");
      out.write("\t\t\t<link rel=\"stylesheet\" href=\"css/bootstrap.css\">\n");
      out.write("\t\t\t<link rel=\"stylesheet\" href=\"css/magnific-popup.css\">\n");
      out.write("\t\t\t<link rel=\"stylesheet\" href=\"css/nice-select.css\">\n");
      out.write("\t\t\t<link rel=\"stylesheet\" href=\"css/animate.min.css\">\n");
      out.write("\t\t\t<link rel=\"stylesheet\" href=\"css/owl.carousel.css\">\n");
      out.write("\t\t\t<link rel=\"stylesheet\" href=\"css/jquery-ui.css\">\n");
      out.write("\t\t\t<link rel=\"stylesheet\" href=\"css/main.css\">\n");
      out.write("\t\t</head>\n");
      out.write("\t\t<body>\n");
      out.write("\t\t  <header id=\"header\">\n");
      out.write("\t\t    <div class=\"container main-menu\">\n");
      out.write("\t\t    \t<div class=\"row align-items-center justify-content-between d-flex\">\n");
      out.write("\t\t\t      <div id=\"logo\">\n");
      out.write("\t\t\t        <a href=\"index.jsp\"><img src=\"img/logo.png\" alt=\"\" title=\"\" /></a>\n");
      out.write("\t\t\t      </div>\n");
      out.write("\t\t\t      <nav id=\"nav-menu-container\">\n");
      out.write("\t\t\t        <ul class=\"nav-menu\">\n");
      out.write("\t\t\t          <li><a href=\"index.jsp\">Home</a></li>\n");
      out.write("\t\t\t          <li><a href=\"advanced.html\">Advanced Tester</a></li>\n");
      out.write("\t\t\t          <li><a href=\"api.html\">API</a></li>\n");
      out.write("\t\t\t          <li class=\"menu-has-children\"><a href=\"\">TBD</a>\n");
      out.write("\t\t\t            <ul>\n");
      out.write("\t\t\t              <li><a href=\"tbd1.html\">TBD1</a></li>\n");
      out.write("\t\t\t              <li><a href=\"tbd2.html\">TBD2</a></li>\n");
      out.write("\t\t\t            </ul>\n");
      out.write("\t\t\t          </li>\n");
      out.write("\t\t\t        </ul>\n");
      out.write("\t\t\t      </nav><!-- #nav-menu-container -->\n");
      out.write("\t\t    \t</div>\n");
      out.write("\t\t    </div>\n");
      out.write("\t\t  </header><!-- #header -->\n");
      out.write("\n");
      out.write("\t\t\t<!-- start banner Area -->\n");
      out.write("\t\t\t<section class=\"relative about-banner\">\n");
      out.write("\t\t\t\t<div class=\"overlay overlay-bg\"></div>\n");
      out.write("\t\t\t\t<div class=\"container\">\n");
      out.write("\t\t\t\t\t<div class=\"row d-flex align-items-center justify-content-center\">\n");
      out.write("\t\t\t\t\t\t<div class=\"about-content col-lg-12\">\n");
      out.write("\t\t\t\t\t\t\t<h1 class=\"text-white\">\n");
      out.write("\t\t\t\t\t\t\t\tTester Results Page\n");
      out.write("\t\t\t\t\t\t\t</h1>\n");
      out.write("\t\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t\t</div>\n");
      out.write("\t\t\t\t</div>\n");
      out.write("\t\t\t</section>\n");
      out.write("\t\t\t<!-- End banner Area -->\n");
      out.write("\n");
      out.write("            <!-- Tester area start here -->\n");
      out.write("            <style>\n");
      out.write("                input[type=text]:focus {\n");
      out.write("                background-color: lightblue;\n");
      out.write("\n");
      out.write("            }\n");
      out.write("            </style>\n");
      out.write("            <pre>\n");
      out.write("                </br>    Parameters passed to this page are: </br>\n");
      out.write("                <b align=\"center\">\n");
      out.write("                    <p>Input1: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${input1}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\n");
      out.write("                    <p>Input2: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${input2}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\n");
      out.write("                    <p>Input3: ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${input3}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</p>\n");
      out.write("                </b>\n");
      out.write("            </pre>\n");
      out.write("            ");

                int i1 = Integer.parseInt(request.getParameter("input1"));
                int i2 = Integer.parseInt(request.getParameter("input2"));
                int i3 = Integer.parseInt(request.getParameter("input3"));

                try {
                    if (i1==0)
                    {
                        out.print("<h2> Input1 is zero so will create an exception! </h2>");
                        int a = 1/0; // cause division by zero exception

                    }
                }
                catch (Exception e)
                {
                    out.print("Caught Exception. Message is: " + e.getMessage());
                }

                // Date date = new Date();
                // out.print("<h2>" + date.toString() + "</h2>");
            
      out.write("\n");
      out.write("\n");
      out.write("            <!-- Ends of tester area here -->\n");
      out.write("\n");
      out.write("\t\t\t<script src=\"js/vendor/jquery-2.2.4.min.js\"></script>\n");
      out.write("\t\t\t<script src=\"js/popper.min.js\"></script>\n");
      out.write("\t\t\t<script src=\"js/vendor/bootstrap.min.js\"></script>\n");
      out.write("  \t\t\t<script src=\"js/easing.min.js\"></script>\n");
      out.write("\t\t\t<script src=\"js/hoverIntent.js\"></script>\n");
      out.write("\t\t\t<script src=\"js/superfish.min.js\"></script>\n");
      out.write("\t\t\t<script src=\"js/jquery.ajaxchimp.min.js\"></script>\n");
      out.write("\t\t\t<script src=\"js/jquery.magnific-popup.min.js\"></script>\n");
      out.write("    \t\t<script src=\"js/jquery.tabs.min.js\"></script>\n");
      out.write("\t\t\t<script src=\"js/jquery.nice-select.min.js\"></script>\n");
      out.write("            <script src=\"js/isotope.pkgd.min.js\"></script>\n");
      out.write("\t\t\t<script src=\"js/waypoints.min.js\"></script>\n");
      out.write("\t\t\t<script src=\"js/jquery.counterup.min.js\"></script>\n");
      out.write("\t\t\t<script src=\"js/simple-skillbar.js\"></script>\n");
      out.write("\t\t\t<script src=\"js/owl.carousel.min.js\"></script>\n");
      out.write("\t\t\t<script src=\"js/mail-script.js\"></script>\n");
      out.write("\t\t\t<script src=\"js/main.js\"></script>\n");
      out.write("\t\t</body>\n");
      out.write("\t</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
